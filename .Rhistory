install.packages("ggplot2")
install.packages(c("car", "d3Network", "devtools", "dplyr", "dunn.test", "fifer", "foreign", "psych", "ggnetwork", "ggthemes", "knitr", "NLP", "pander", "plyr", "RColorBrewer", "reshape2", "shiny", "scales", "scholar", "SnowballC", "stats"))
install.packages(c("car", "d3Network", "devtools", "dplyr", "dunn.test",
install.packages(c("car", "d3Network", "devtools", "dplyr", "dunn.test", "fifer", "foreign", "psych", "ggnetwork", "ggthemes", "knitr", "NLP", "pander", "plyr", "RColorBrewer", "reshape2", "shiny", "scales", "scholar", "SnowballC", "stats"))
install.packages(c("car", "d3Network", "devtools", "dplyr", "dunn.test",
install.packages(c("car", "d3Network", "devtools", "dplyr", "dunn.test", "fifer", "foreign", "psych", "ggnetwork", "ggthemes", "knitr", "NLP", "pander", "plyr", "RColorBrewer", "reshape2", "shiny", "scales", "scholar", "SnowballC", "stats"))
install.packages(c("car", "d3Network", "devtools", "dplyr", "dunn.test",
)
install.packages("car")
install.packages("d3Network")
install.packages(c(devtools", "dplyr", "dunn.test"))
install.packages(c("devtools", "dplyr", "dunn.test"))
install.packages(c("dplyr", "dunn.test", "fifer"))
install.packages(c("foreign", "psych", "ggnetwork", "ggthemes", "knitr", "NLP", "pander", "plyr", "RColorBrewer", "reshape2", "shiny", "scales", "scholar", "SnowballC", "stats"))
install.packages(c("foreign", "psych", "ggnetwork", "ggthemes",
install.packages(c("foreign", "psych", "ggnetwork"))
install.packages(c("ggthemes", "knitr", "NLP"))
install.packages(c("pander", "plyr", "reshape2", "shiny", "scales", "scholar", "SnowballC", "stats"))
install.packages(c("pander", "plyr", "shiny", "scales", "scholar", "SnowballC", "stats"))
install.packages(c("pander", "plyr", "shiny", "scales", "scholar", "SnowballC"))
pie
?pie
library(SPARQL)
endpoint <- "http://45.78.35.217:8890/sparql"
q <- "prefix shl: <http://www.library.sh.cn/ontology/>
prefix bf: <http://bibframe.org/vocab/>
select distinct ?s ?name ?label ?count
where {
?s ?p ?name . filter strstarts(str(?name), str(?label))
{service <http://data.library.sh.cn:8890/sparql> {
select ?fn ?label (count(distinct ?s) as ?count) from <http://gen.library.sh.cn/graph/person>
where {
?s foaf:familyName ?fn ; shl:roleOfFamily ?role .
{select ?fn ?label from <http://gen.library.sh.cn/graph/baseinfo> where {
?fn bf:label ?label. filter (lang(?label)='chs')
}}
} order by desc(?count)
}}
}  limit 10"
prefix <- c("lop","http://semanticweb.cs.vu.nl/poseidon/ns/instances/",
"eez","http://semanticweb.cs.vu.nl/poseidon/ns/eez/")
res <- SPARQL(endpoint,q,prefix)$results
res
plot <- ggplot(data = res) +
geom_bar(aes(x = name, y = count))
library(ggplot2)
plot <- ggplot(data = res) +
geom_bar(aes(x = name, y = count))
plot
plot <- ggplot(data = res) +
geom_bar(aes(x = name, y = count), stat = "identity")
plot
install.packages("Cairo")
?plot
plot(graph_plot)
graph_plot <- ggplot(data = res) +
geom_bar(aes(x = name, y = count), stat = "identity")
plot(graph_plot)
plot(graph_plot, family = "simsun")
graph_plot <- ggplot(data = res) +
geom_bar(aes(x = name, y = count), stat = "identity") +
theme_text(family=’STKaiti’)
graph_plot
graph_plot <- ggplot(data = res) +
geom_bar(aes(x = name, y = count), stat = "identity") +
theme_text(family="STKaiti")
graph_plot
graph_plot <- ggplot(data = res) +
geom_bar(aes(x = name, y = count), stat = "identity") +
theme(text = element_text(family="STKaiti"))
graph_plot
graph_plot <- ggplot(data = res) +
geom_bar(aes(x = name, y = count), stat = "identity") +
theme(text = element_text(family="STKaiti")) +
coord_flip()
graph_plot
graph_plot <- ggplot(data = res) +
geom_bar(aes(x = name, y = count), stat = "identity") +
theme(text = element_text(family="YouYuan")) +
coord_flip()
graph_plot
graph_plot <- ggplot(data = res) +
geom_bar(aes(x = name, y = count), stat = "identity") +
theme(text = element_text(family="Simsun")) +
coord_flip()
graph_plot
graph_plot <- ggplot(data = res) +
geom_bar(aes(x = name, y = count), stat = "identity") +
theme(text = element_text(family="SimSun")) +
coord_flip()
graph_plot
graph_plot <- ggplot(data = res) +
geom_bar(aes(x = name, y = count), stat = "identity") +
theme(axis.title.x = element_text(family="SimSun")) +
coord_flip()
graph_plot
graph_plot <- ggplot(data = res) +
geom_bar(aes(x = name, y = count), stat = "identity") +
theme(axis.tick.x = element_text(family="SimSun")) +
coord_flip()
graph_plot
graph_plot <- ggplot(data = res) +
geom_bar(aes(x = name, y = count), stat = "identity") +
theme(axis.text = element_text(family="SimSun")) +
coord_flip()
graph_plot
graph_plot <- ggplot(data = res) +
geom_bar(aes(x = name, y = count), stat = "identity") +
theme(axis.text.x = element_text(family="SimSun")) +
coord_flip()
graph_plot
graph_plot <- ggplot(data = res) +
geom_bar(aes(x = name, y = count), stat = "identity") +
theme(axis.text.y = element_text(family="SimSun")) +
coord_flip()
graph_plot
res <- sort(res$count, decreasing = T)
graph_plot <- ggplot(data = res) +
geom_bar(aes(x = name, y = count), stat = "identity") +
theme(axis.text.y = element_text(family="SimSun")) +
coord_flip()
res
?sort
res$count
?order
res <- res[order(res$count, decreasing = T)]
graph_plot <- ggplot(data = res) +
geom_bar(aes(x = name, y = count), stat = "identity") +
theme(axis.text.y = element_text(family="SimSun")) +
coord_flip()
graph_plot
res <- res[order(res$count, decreasing = T),]
graph_plot <- ggplot(data = res) +
geom_bar(aes(x = name, y = count), stat = "identity") +
theme(axis.text.y = element_text(family="SimSun")) +
coord_flip()
graph_plot
res <- res[order(res$count, decreasing = T),]
res
res <- SPARQL(endpoint,q,prefix)$results
res <- res[order(res$count, decreasing = T),]
graph_plot <- ggplot(data = res) +
geom_bar(aes(x = name, y = count), stat = "identity") +
theme(axis.text.y = element_text(family="SimSun")) +
coord_flip()
graph_plot
res
res <- SPARQL(endpoint,q,prefix)$results
graph_plot <- ggplot(data =  res[order(res$count, decreasing = T),]) +
geom_bar(aes(x = name, y = count), stat = "identity") +
theme(axis.text.y = element_text(family="SimSun")) +
coord_flip()
graph_plot
graph_plot <- ggplot(data =  res) +
geom_bar(aes(x = reorder(name, -count), y = count), stat = "identity") +
theme(axis.text.y = element_text(family="SimSun")) +
coord_flip()
graph_plot
graph_plot <- ggplot(data =  res) +
geom_bar(aes(x = reorder(name, count), y = count), stat = "identity") +
theme(axis.text.y = element_text(family="SimSun")) +
coord_flip()
graph_plot
graph_plot <- ggplot(data =  res) +
geom_bar(aes(x = reorder(name, count), y = count), stat = "identity") +
theme(axis.text.y = element_text(family="SimSun")) +
labs(title = "Count by name", x = "Count", y = "Name") +
coord_flip()
graph_plot
graph_plot <- ggplot(data =  res) +
geom_bar(aes(x = reorder(name, count), y = count), stat = "identity") +
theme(axis.text.y = element_text(family="SimSun")) +
labs(title = "Count by name", x = "Name", y = "Count") +
coord_flip()
graph_plot
graph_plot <- ggplot(data =  res) +
geom_bar(aes(x = reorder(name, count), y = count), stat = "identity") +
theme(axis.text.y = element_text(family="SimSun")) +
labs(title = "Frequency of instance by name", x = "Name", y = "Count") +
coord_flip()
graph_plot
setwd("~/Documents/Github/Info813")
knitr::opts_chunk$set(echo = F, warning = F)
library(foreign)
library(MASS)
library(psych)
library(klaR)
library(MVT)
library(MVN)
library(rrcov)
library(Hotelling)
library(pander)
library(car)
data <- read.spss("iris.sav")
output <- as.data.frame(data)
colnames(output) <- c("species", "sepal_length", "sepal_width", "petal_length", "petal_width")
output$species <- as.factor(output$species)
describeBy(output[,2:5], output[,1])
## Homogeneity test using MVT package
sf <- studentFit(~ sepal_length + sepal_width + petal_length + petal_width, data = output)
homogeneity.test(sf, test = "LRT", type = "scale")
##Univariate normality test using MVN package
uniNorm(output[,2:5])
par(mfrow = c(2,2))
hist(output[,2], main = "sepal_length", xlab = "sepal_length")
hist(output[,3], main = "sepal_width", xlab = "sepal_width")
hist(output[,4], main = "petal_length", xlab = "sepal_width")
hist(output[,5], main = "petal_width", xlab = "sepal_width")
## Multivariant normality: Mardia’s Multivariate Normality Test
mardiaTest(output[,2:5], cov = T, qqplot = F)
## Individual variable data transformation
output$sepal_length_trans <- sqrt(output$sepal_length)
output$sepal_width_trans <- sqrt(output$sepal_width)
output$petal_length_trans <- abs(output$petal_length - mean(output$petal_length))
output$petal_width_trans <- abs(output$petal_width - mean(output$petal_width))
summary(p1 <- powerTransform(cbind(sepal_length_trans, sepal_width_trans, petal_length_trans, petal_width_trans) ~ species, output))
testTransform(p1, lambda = c(1, 1, 0.84, 0.71))
trans <- bcPower(with(output, cbind(sepal_length, sepal_width, petal_length, petal_width)), coef(p1, round = T))
trans <- data.frame(trans)
output$sepal_length_bt <- trans[,1]
output$sepal_width_bt <- trans[,2]
output$petal_length_bt <- trans[,3]
output$petal_width_bt <- trans[,4]
pairs(output[,6:9], cex.labels = 1)
pairs(output[,10:13], cex.labels = 1)
## Homogeneity test using MVT package
sf <- studentFit(~ sepal_length_trans + sepal_width_trans + petal_length_trans + petal_width_trans,
data = output)
sf_1 <- studentFit(~ sepal_length_bt + sepal_width_bt + petal_length_bt + petal_width_bt,
data = output)
homogeneity.test(sf, test = "LRT", type = "scale")
homogeneity.test(sf_1, test = "LRT", type = "scale")
##Univariate normality test using MVN package
uniNorm(output[,6:9])
uniNorm(output[,10:13])
## Mardia’s Multivariate Normality Test
mardiaTest(output[,2:5], cov = T, qqplot = F)
mardiaTest(output[,2:5], cov = T, qqplot = F)
lda.model_1 <- lda(species ~ sepal_length + sepal_width + petal_length + petal_width,
data = output, CV = T)
lda.model_2 <- lda(species ~ sepal_length_trans + sepal_width_trans + petal_length_trans + petal_width_trans,
data = output, CV = T)
lda.model_3 <- lda(species ~ sepal_length_bt + sepal_width_bt + petal_length_bt + petal_width_bt,
data = output, CV = T)
lda.model_1
ct_1 <- table(output$species, lda.model_1$class)
ct_2 <- table(output$species, lda.model_2$class)
ct_3 <- table(output$species, lda.model_3$class)
sum(diag(prop.table(ct_1)))
sum(diag(prop.table(ct_2)))
sum(diag(prop.table(ct_3)))
lda.values_1 <- predict(lda.model_1)
apply(lda.values_1$posterior, MARGIN = 1, FUN = max)
plot(lda.model_1)
lda.values_1 <- predict(lda.model_1a)
apply(lda.values_1$posterior, MARGIN = 1, FUN = max)
plot(lda.model_1)
lda.model_1a <- lda(species ~ sepal_length + sepal_width + petal_length + petal_width,
data = output)
lda.model_2a <- lda(species ~ sepal_length_trans + sepal_width_trans + petal_length_trans + petal_width_trans,
data = output)
lda.model_3a <- lda(species ~ sepal_length_bt + sepal_width_bt + petal_length_bt + petal_width_bt,
data = output)
lda.values_1 <- predict(lda.model_1a)
apply(lda.values_1$posterior, MARGIN = 1, FUN = max)
plot(lda.model_1)
plot(lda.model_1a)
ct_1 <- table(output$species, lda.model_1$class)
ct_2 <- table(output$species, lda.model_2$class)
ct_3 <- table(output$species, lda.model_3$class)
diag(prop.table(ct_1))
diag(prop.table(ct_2))
diag(prop.table(ct_3))
prop.table(ct_1)
ct_1 <- table(output$species, lda.model_1$class)
ct_2 <- table(output$species, lda.model_2$class)
ct_3 <- table(output$species, lda.model_3$class)
sum(diag(prop.table(ct_1)))
sum(diag(prop.table(ct_2)))
sum(diag(prop.table(ct_3)))
lda.model_1a <- lda(species ~ sepal_length + sepal_width + petal_length + petal_width,
data = output)
lda.model_2a <- lda(species ~ sepal_length_trans + sepal_width_trans + petal_length_trans + petal_width_trans,
data = output)
lda.model_3a <- lda(species ~ sepal_length_bt + sepal_width_bt + petal_length_bt + petal_width_bt,
data = output)
lda.values_1 <- predict(lda.model_1a)
apply(lda.values_1$posterior, MARGIN = 1, FUN = max)
plot(lda.model_1a)
lda.values_2 <- predict(lda.model_2a)
apply(lda.values_2$posterior, MARGIN = 1, FUN = max)
lda.values_3 <- predict(lda.model_3a)
apply(lda.values_3$posterior, MARGIN = 1, FUN = max)
plot(lda.model_2a)
plot(lda.model_3a)
par(mfrow = c(2,2))
plot(lda.model_1a, main = "model 1")
plot(lda.model_2a, main = "model 2")
plot(lda.model_3a, main = "model 3")
``` {R}
## accuracy rate
ct_1 <- table(output$species, lda.model_1$class)
ct_2 <- table(output$species, lda.model_2$class)
ct_3 <- table(output$species, lda.model_3$class)
accuracy.table <- data.frame(Model = c("model 1", "model 2", "model 3"),
Accuracy = c(sum(diag(prop.table(ct_1))), sum(diag(prop.table(ct_2))), sum(diag(prop.table(ct_3)))))
pandoc.table(accuracy.table, caption = "Table of accuracy rate comparison")
ldahist(data = lda.values_1$x[,1], g = output$species)
ldahist(data = lda.values_1$x[,2], g = output$species)
?ldahist
tab <- table(output[,1], lda.values$class)
sum(tab[row(tab) == col(tab)]) / sum(tab)
tab <- table(output[,1], lda.values_1$class)
sum(tab[row(tab) == col(tab)]) / sum(tab)
partimat(species ~ sepal_length + sepal_width + petal_length + petal_width,
data = output, method = "lda")
?partimat
result <- Wilks.test(species ~ ., data = output)
result
result <- Wilks.test(lda.model_1)
pairs(output[,2:5], cex.labels = 1)
?pairs
pairs(output[,2:5], cex.labels = 1, text.panel = output[,1])
pairs(output[,2:5], cex.labels = 1, labels = output[,1])
ggpairs(output, coloru = "species", alpha = 0.4)
??ggpairs
library(ggpairs)
install.packages("ggpairs")
library(ggpairs)
install.packages("GGally")
install.packages("GGally")
library(GGally)
ggpairs(output, coloru = "species", alpha = 0.4)
ggpairs(output, colour = "species", alpha = 0.4)
ggpairs(output[,2:5], colour = "species", alpha = 0.4)
ggpairs(output[,2:5], mapping = (colour = "species", alpha = 0.4))
ggpairs(output[,2:5], aes(colour = "species", alpha = 0.4))
ggpairs(output[,2:5], mapping = (colour = "species", alpha = 0.4))
ggpairs(output[,2:5], mapping = ggplot2::aes(colour = "species", alpha = 0.4))
ggpairs(output[,2:5], mapping = ggplot2::aes(colour = species, alpha = 0.4))
ggpairs(output[,2:5], mapping = ggplot2::aes(colour = output[,1], alpha = 0.4))
ggpairs(output[,2:5])
ggpairs(output[,2:5]，
mapping = ggplot2::aes(color = species))
ggpairs(output[,2:5],
mapping = ggplot2::aes(color = species))
ggpairs(output[,2:5],
mapping = ggplot2::aes(color = output$species))
ggpairs(output[,2:5],
mapping = ggplot2::aes(color = output$species),
upper = list("red", "blue", "black"))
ggpairs(output[,2:5],
mapping = ggplot2::aes(color = output$species),
upper = list(discrete = wrap("density", alpha = 0.5)))
ggpairs(output[,2:5],
mapping = ggplot2::aes(color = output$species),
upper = list("blank"))
cols <- character(nrow(output))
cols[] <- "black"
cols[output$species == "1"] <- "blue"
cols[output$species == "2"] <- "red"
pairs(output,col=cols)
cols <- character(nrow(output))
cols[] <- "black"
cols[output$species == "1"] <- "blue"
cols[output$species == "2"] <- "red"
pairs(output[,2:5],col=cols)
cols <- character(nrow(output))
cols[] <- "black"
cols[output$species == "1"] <- "blue"
cols[output$species == "2"] <- "red"
pairs(output[,2:5], col=cols, cex.labels = 1)
shiny::runApp('~/Documents/PhD_portfolio/genealogy/gen_vis')
