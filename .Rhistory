att1 =~ X1 + X2 + X3
att2 =~ X1a + X2a + X3a
eval =~ Y1 + Y2 + Y3
# regression model
att2 ~ att1
eval ~ att1 + att2
"
fit <- sem(model, data = output)
summary(fit)
model <- "
# measurement model
att1 =~ X1 + X2 + X3
att2 =~ X1a + X2a + X3a
eval =~ Y1 + Y2 + Y3
# regression model
att2 ~ att1
eval ~ att1 + att2
# residuals
att2 ~~ att1
eval ~~ att1 + att2
"
fit <- sem(model, data = output)
summary(fit)
model <- "
# measurement model
att1 =~ X1 + X2 + X3
att2 =~ X1a + X2a + X3a
eval =~ Y1 + Y2 + Y3
# regression model
att2 ~ att1
eval ~ att1 + att2
# residuals
att2 ~~ att1
eval ~~ att1
"
fit <- sem(model, data = output)
summary(fit)
model <- "
# measurement model
att1 =~ X1 + X2 + X3
att2 =~ X1a + X2a + X3a
eval =~ Y1 + Y2 + Y3
# regression model
att2 ~ att1
eval ~ att1 + att2
# residuals
X1 ~~ X1a
"
fit <- sem(model, data = output)
summary(fit)
model <- "
# measurement model
att1 =~ X1 + X2 + X3
att2 =~ X1a + X2a + X3a
eval =~ Y1 + Y2 + Y3
# regression model
att2 ~ att1
eval ~ att1 + att2
# residuals
X1 ~~ X1a
X2 ~~ X2a
X3 ~~ X3a
"
fit <- sem(model, data = output)
summary(fit)
model <- "
# measurement model
att1 =~ X1 + X2 + X3
att2 =~ X1a + X2a + X3a
eval =~ Y1 + Y2 + Y3
# regression model
att2 ~ att1
eval ~ att1 + att2
# residuals
X1 ~~ X1a
X2 ~~ X2a
X3 ~~ X3a
X1 ~~ 1 * X1
X2 ~~ 1 * X2
X3 ~~ 1 * X3
X1a ~~ 1 * X1a
X2a ~~ 1 * X2a
X3a ~~ 1 * X3a
Y1 ~~ 1 * Y1
Y2 ~~ 1 * Y2
Y3 ~~ 1 * Y3
"
fit <- sem(model, data = output)
summary(fit)
summary(fit, standardized = T)
resid(fit)
fitMeasures(fit)
summary(fit, standardized = T)
semPaths(fit)
?semPaths
??semPaths
library(semPlot)
semPaths(fit)
?semPaths
?qgraph.lavaan
qgraph.lavaan(fit)
library(qgraph)
qgraph.lavaan(fit)
semPlot(fit, layout = "spring")
semPaths(fit, layout = "spring")
semPaths(fit, layout = "spring", nodeLabels = lbls)
semPaths(fit, layout = "spring", what = "std")
fit <- sem(model, data = output)
summary(fit, standardized = T)
fit <- sem(model, data = output)
summary(fit, standardized = T)
fitMeasures(fit)
fit$value[1]
attributes(fit_value)
fit_value <- fitMeasures(fit)
attributes(fit_value)
report.table <- data.frame(Measures = c("p.value", "CFI", "TLI", "RMSEA"),
Values = c(fit_value$pvalue, fit_value$cfi, fit_value$tli, fit_value$rmsea))
model <- "
# measurement model
att1 =~ X1 + X2 + X3
att2 =~ X1a + X2a + X3a
eval =~ Y1 + Y2 + Y3
# regression model
att2 ~ att1
eval ~ att1 + att2
# residuals
X1 ~~ X1a
X2 ~~ X2a
X3 ~~ X3a
X1 ~~ 1 * X1
X2 ~~ 1 * X2
X3 ~~ 1 * X3
X1a ~~ 1 * X1a
X2a ~~ 1 * X2a
X3a ~~ 1 * X3a
Y1 ~~ 1 * Y1
Y2 ~~ 1 * Y2
Y3 ~~ 1 * Y3
"
fit <- sem(model, data = output)
fit_value <- fitMeasures(fit)
summary(fit, standardized = T)
report.table <- data.frame(Measures = c("p.value", "CFI", "TLI", "RMSEA"),
Values = c(fit_value$pvalue, fit_value$cfi, fit_value$tli, fit_value$rmsea))
fit_value$pvalue
fit_value
fit_value[1]
report.table <- data.frame(Measures = c("p.value", "CFI", "TLI", "RMSEA"),
Values = c(fit_value[5], fit_value[9], fit_value[10], fit_value[23]))
library(render)
library(pander)
report.table <- data.frame(Measures = c("p.value", "CFI", "TLI", "RMSEA"),
Values = c(fit_value[5], fit_value[9], fit_value[10], fit_value[23]))
pander(report.table)
report.table <- data.frame(Measures = c("p.value", "CFI", "TLI", "RMSEA"),
Values = c(fit_value[5], fit_value[9], fit_value[10], fit_value[23]))
report.table <- [,2:3]
pander(report.table)
report.table <- data.frame(Measures = c("p.value", "CFI", "TLI", "RMSEA"),
Values = c(fit_value[5], fit_value[9], fit_value[10], fit_value[23]))
report.table <- report.table[,2:3]
pander(report.table)
report.table
?pander.table
pander(report.table, rownames = F)
report.table <- data.frame(Measures = c("p.value", "CFI", "TLI", "RMSEA"),
Values = c(fit_value[5], fit_value[9], fit_value[10], fit_value[23]),
row.names = 1:4)
pander(report.table)
semPaths(fit, layout = "spring", what = "std")
model <- "
# measurement model
att1 =~ X1 + X2 + X3
att2 =~ X1a + X2a + X3a
eval =~ Y1 + Y2 + Y3
# regression model
att2 ~ att1
eval ~ att1 + att2
# residuals
X1 ~~ X1a
X2 ~~ X2a
X3 ~~ X3a
X1 ~~ 1 * X1
X2 ~~ 1 * X2
X3 ~~ 1 * X3
X1a ~~ 1 * X1a
X2a ~~ 1 * X2a
X3a ~~ 1 * X3a
Y1 ~~ 1 * Y1
Y2 ~~ 1 * Y2
Y3 ~~ 1 * Y3
"
fit <- sem(model, data = output)
fit_value <- fitMeasures(fit)
summary(fit, standardized = T)
?sort
sort(output)
output <- sort(output$score)
head(output)
knitr::opts_chunk$set(echo = TRUE)
library(foreign)
library(lavaan)
library(semPlot)
library(pander)
data <- read.spss("MATH_ATTITUDE.sav")
output <- data.frame(data)
colnames(output) <- c("ID", "X1", "X2", "X3", "X1a", "X2a", "X3a", "Y1", "Y2", "Y3", "score")
output[,1] <- as.factor(output[,1])
output <- output[order(output$score),]
head(output)
output <- output[order(output$score),]
ngroup = 2
output = data.frame(output = output, group=seq(length(output))%%ngroups)
ngroup = 2
output = data.frame(output = output, group=seq(length(output))%%ngroups)
ngroups = 2
output.1 = data.frame(output = output, group=seq(length(output))%%ngroups)
n <- 10; nn <- 100
g <- factor(round(n * runif(n * nn)))
x <- rnorm(n * nn) + sqrt(as.numeric(g))
xg <- split(x, g)
g
x
xg
?split
splitdf <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)/2))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
splits <- splitdf(output, seed = 808)
str(splits)
lapply(splits, nrow)
lapply(splits, head)
training <- splits$transet
testing <- splits$testset)
splitdf <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)/2))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
splits <- splitdf(output, seed = 808)
str(splits)
lapply(splits, nrow)
lapply(splits, head)
training <- splits$transet
testing <- splits$testset
splitdf <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
splitindex <- sample(index, trunc(length(index)/2))
set1 <- dataframe[splitindex, ]
set2 <- dataframe[-splitindex, ]
list(set1=set1,set2=set2)
}
splits <- splitdf(output, seed = 808)
str(splits)
lapply(splits, nrow)
lapply(splits, head)
set1 <- splits$set1
set2 <- splits$set1
set1
mean(set1$score)
mean(set2$score)
splitdf <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
splitindex <- sample(index, trunc(length(index)/2))
set1 <- dataframe[splitindex, ]
set2 <- dataframe[-splitindex, ]
list(set1=set1,set2=set2)
}
splits <- splitdf(output, seed = 808)
str(splits)
lapply(splits, nrow)
lapply(splits, head)
set1 <- splits$set1
set2 <- splits$set2
mean(set2$score)
mean(set1$score)
nrow(set1)
nrow(set2)
set.table <- data.frame(Set = c("Set 1", "Set 2"),
Sample = c(nrow(set1), nrow(set2)),
Mean.score = c(mean(set1$score), mean(set2$score)))
pander(set.table)
splitdf <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
splitindex <- sample(index, trunc(length(index)/2))
set1 <- dataframe[splitindex, ]
set2 <- dataframe[-splitindex, ]
list(set1=set1,set2=set2)
}
splits <- splitdf(output)
str(splits)
lapply(splits, nrow)
lapply(splits, head)
set1 <- splits$set1
set2 <- splits$set2
set.table <- data.frame(Set = c("Set 1", "Set 2"),
Sample = c(nrow(set1), nrow(set2)),
Mean.score = c(mean(set1$score), mean(set2$score)))
pander(set.table)
splitdf <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
splitindex <- sample(index, trunc(length(index)/2))
set1 <- dataframe[splitindex, ]
set2 <- dataframe[-splitindex, ]
list(set1=set1,set2=set2)
}
splits <- splitdf(output, seed = 100)
str(splits)
lapply(splits, nrow)
lapply(splits, head)
set1 <- splits$set1
set2 <- splits$set2
set.table <- data.frame(Set = c("Set 1", "Set 2"),
Sample = c(nrow(set1), nrow(set2)),
Mean.score = c(mean(set1$score), mean(set2$score)))
pander(set.table)
attributes(summary(fit, standardized = T))
parameterEstimates(fit.1)
fit.1 <- sem(model, data = set1)
fit.2 <- sem(model, data = set2)
parameterEstimates(fit.1)
report.table <- data.frame(Measures = c("p.value", "CFI", "TLI", "RMSEA"),
Values = c(fit_value[5], fit_value[9], fit_value[10], fit_value[23]),
row.names = 1:4)
pander(report.table)
fit.1.value <- parameterEstimates(fit.1)
fit.1.value
fit.1.value[29]
fit.1.value[11,1]
fit.1.value[11,4]
fit.1 <- sem(model, data = set1)
fit.2 <- sem(model, data = set2)
fit.1.sum <- fitMeasures(fit.1)
fit.2.sum <- fitMeasures(fit.2)
fit.1.value <- parameterEstimates(fit.1)
fit.2.value <- parameterEstimates(fit.1)
result.table.1 <- data.frame(
Set = c("Set 1", "Set 2"),
p.value = c(fit.1.sum$p.value[5], fit.1.sum$p.value[5]),
CFI = c(fit.1.sum$p.value[9], fit.1.sum$p.value[9]),
TLI = c(fit.1.sum$p.value[10], fit.1.sum$p.value[10]),
RMSEA = c(fit.1.sum$p.value[23], fit.1.sum$p.value[23]),
Att1-Eval.coef = c(fit.1.value[11,4], fit.2.value[11,4]),
Att1-Eval.z = c(fit.1.value[11,6], fit.2.value[11,6]),
Att1-Eval.p = c(fit.1.value[11,7], fit.2.value[11,7]),
Att2-Eval.coef = c(fit.1.value[12,4], fit.2.value[12,4]),
Att2-Eval.z = c(fit.1.value[12,6], fit.2.value[12,6]),
Att2-Eval.p = c(fit.1.value[12,7], fit.2.value[12,7])
)
pander(result.table.1)
fit.1 <- sem(model, data = set1)
fit.2 <- sem(model, data = set2)
fit.1.sum <- fitMeasures(fit.1)
fit.2.sum <- fitMeasures(fit.2)
fit.1.value <- parameterEstimates(fit.1)
fit.2.value <- parameterEstimates(fit.1)
result.table.1 <- data.frame(
Set = c("Set 1", "Set 2"),
p.value = c(fit.1.sum$p.value[5], fit.1.sum$p.value[5]),
CFI = c(fit.1.sum$p.value[9], fit.1.sum$p.value[9]),
TLI = c(fit.1.sum$p.value[10], fit.1.sum$p.value[10]),
RMSEA = c(fit.1.sum$p.value[23], fit.1.sum$p.value[23]),
Att1.Eval.coef = c(fit.1.value[11,4], fit.2.value[11,4]),
Att1.Eval.z = c(fit.1.value[11,6], fit.2.value[11,6]),
Att1.Eval.p = c(fit.1.value[11,7], fit.2.value[11,7]),
Att2.Eval.coef = c(fit.1.value[12,4], fit.2.value[12,4]),
Att2.Eval.z = c(fit.1.value[12,6], fit.2.value[12,6]),
Att2.Eval.p = c(fit.1.value[12,7], fit.2.value[12,7])
)
pander(result.table.1)
fit.1 <- sem(model, data = set1)
fit.2 <- sem(model, data = set2)
fit.1.sum <- fitMeasures(fit.1)
fit.2.sum <- fitMeasures(fit.2)
fit.1.value <- parameterEstimates(fit.1)
fit.2.value <- parameterEstimates(fit.1)
result.table.1 <- data.frame(
Set = c("Set 1", "Set 2"),
p.value = c(fit.1.sum[5], fit.1.sum[5]),
CFI = c(fit.1.sum[9], fit.1.sum[9]),
TLI = c(fit.1.sum[10], fit.1.sum[10]),
RMSEA = c(fit.1.sum[23], fit.1.sum[23]),
Att1.Eval.coef = c(fit.1.value[11,4], fit.2.value[11,4]),
Att1.Eval.z = c(fit.1.value[11,6], fit.2.value[11,6]),
Att1.Eval.p = c(fit.1.value[11,7], fit.2.value[11,7]),
Att2.Eval.coef = c(fit.1.value[12,4], fit.2.value[12,4]),
Att2.Eval.z = c(fit.1.value[12,6], fit.2.value[12,6]),
Att2.Eval.p = c(fit.1.value[12,7], fit.2.value[12,7])
)
pander(result.table.1)
report.table <- data.frame(Measures = c("p.value", "CFI", "TLI", "RMSEA"),
Values = c(fit_value[5], fit_value[9], fit_value[10], fit_value[23]),
row.names = 1:4)
pander(report.table)
fit_sum <- parameterEstimates(fit)
fit.1 <- sem(model, data = set1)
fit.2 <- sem(model, data = set2)
fit.1.sum <- fitMeasures(fit.1)
fit.2.sum <- fitMeasures(fit.2)
fit.1.value <- parameterEstimates(fit.1)
fit.2.value <- parameterEstimates(fit.2)
result.table.1 <- data.frame(
Set = c("Whole", "Set 1", "Set 2"),
p.value = c(fit_value[5], fit.1.sum[5], fit.1.sum[5]),
CFI = c(fit_value[9], fit.1.sum[9], fit.1.sum[9]),
TLI = c(fit_value[10], fit.1.sum[10], fit.1.sum[10]),
RMSEA = c(fit_value[23], fit.1.sum[23], fit.1.sum[23]),
Att1.Eval.coef = c(fit_sum[11,4], fit.1.value[11,4], fit.2.value[11,4]),
Att1.Eval.z = c(fit_sum[11,6], fit.1.value[11,6], fit.2.value[11,6]),
Att1.Eval.p = c(fit_sum[11,7], fit.1.value[11,7], fit.2.value[11,7]),
Att2.Eval.coef = c(fit_sum[12,4], fit.1.value[12,4], fit.2.value[12,4]),
Att2.Eval.z = c(fit_sum[12,6], fit.1.value[12,6], fit.2.value[12,6]),
Att2.Eval.p = c(fit_sum[12,7], fit.1.value[12,7], fit.2.value[12,7])
)
pander(result.table.1)
fit.1 <- sem(model, data = set1)
fit.2 <- sem(model, data = set2)
fit.1.sum <- fitMeasures(fit.1)
fit.2.sum <- fitMeasures(fit.2)
fit.1.value <- parameterEstimates(fit.1)
fit.2.value <- parameterEstimates(fit.2)
result.table.1 <- round(data.frame(
Set = c("Whole", "Set 1", "Set 2"),
p.value = c(fit_value[5], fit.1.sum[5], fit.1.sum[5]),
CFI = c(fit_value[9], fit.1.sum[9], fit.1.sum[9]),
TLI = c(fit_value[10], fit.1.sum[10], fit.1.sum[10]),
RMSEA = c(fit_value[23], fit.1.sum[23], fit.1.sum[23]),
Att1.Eval.coef = c(fit_sum[11,4], fit.1.value[11,4], fit.2.value[11,4]),
Att1.Eval.z = c(fit_sum[11,6], fit.1.value[11,6], fit.2.value[11,6]),
Att1.Eval.p = c(fit_sum[11,7], fit.1.value[11,7], fit.2.value[11,7]),
Att2.Eval.coef = c(fit_sum[12,4], fit.1.value[12,4], fit.2.value[12,4]),
Att2.Eval.z = c(fit_sum[12,6], fit.1.value[12,6], fit.2.value[12,6]),
Att2.Eval.p = c(fit_sum[12,7], fit.1.value[12,7], fit.2.value[12,7])
), digits = 3)
pander(result.table.1)
result.table.1 <- data.frame(
Set = c("Whole", "Set 1", "Set 2"),
p.value = c(fit_value[5], fit.1.sum[5], fit.1.sum[5]),
CFI = c(fit_value[9], fit.1.sum[9], fit.1.sum[9]),
TLI = c(fit_value[10], fit.1.sum[10], fit.1.sum[10]),
RMSEA = c(fit_value[23], fit.1.sum[23], fit.1.sum[23]),
Att1.Eval.coef = c(fit_sum[11,4], fit.1.value[11,4], fit.2.value[11,4]),
Att1.Eval.z = c(fit_sum[11,6], fit.1.value[11,6], fit.2.value[11,6]),
Att1.Eval.p = c(fit_sum[11,7], fit.1.value[11,7], fit.2.value[11,7]),
Att2.Eval.coef = c(fit_sum[12,4], fit.1.value[12,4], fit.2.value[12,4]),
Att2.Eval.z = c(fit_sum[12,6], fit.1.value[12,6], fit.2.value[12,6]),
Att2.Eval.p = c(fit_sum[12,7], fit.1.value[12,7], fit.2.value[12,7])
)
result.table.1 <- round(result.table.1, digits = 3)
pander(result.table.1)
result.table.1[,2:11] <- round(result.table.1[,2:11], digits = 3)
pander(result.table.1)
fit.1 <- sem(model, data = set1)
fit.2 <- sem(model, data = set2)
fit.1.sum <- fitMeasures(fit.1)
fit.2.sum <- fitMeasures(fit.2)
fit.1.value <- parameterEstimates(fit.1)
fit.2.value <- parameterEstimates(fit.2)
result.table.1 <- data.frame(
Set = c("Whole", "Set 1", "Set 2"),
p.value = c(fit_value[5], fit.1.sum[5], fit.2.sum[5]),
CFI = c(fit_value[9], fit.1.sum[9], fit.2.sum[9]),
TLI = c(fit_value[10], fit.1.sum[10], fit.2.sum[10]),
RMSEA = c(fit_value[23], fit.1.sum[23], fit.2.sum[23]),
Att1.Eval.coef = c(fit_sum[11,4], fit.1.value[11,4], fit.2.value[11,4]),
Att1.Eval.z = c(fit_sum[11,6], fit.1.value[11,6], fit.2.value[11,6]),
Att1.Eval.p = c(fit_sum[11,7], fit.1.value[11,7], fit.2.value[11,7]),
Att2.Eval.coef = c(fit_sum[12,4], fit.1.value[12,4], fit.2.value[12,4]),
Att2.Eval.z = c(fit_sum[12,6], fit.1.value[12,6], fit.2.value[12,6]),
Att2.Eval.p = c(fit_sum[12,7], fit.1.value[12,7], fit.2.value[12,7])
)
result.table.1[,2:11] <- round(result.table.1[,2:11], digits = 3)
pander(result.table.1)
model <- "
# measurement model
att1 =~ X1 + X2 + X3
att2 =~ X1a + X2a + X3a
eval =~ Y1 + Y2 + Y3
# regression model
att2 ~ att1
eval ~ att1 + att2
# residuals
X1 ~~ X1a
X2 ~~ X2a
X3 ~~ X3a
X1 ~~ 1 * X1
X2 ~~ 1 * X2
X3 ~~ 1 * X3
X1a ~~ 1 * X1a
X2a ~~ 1 * X2a
X3a ~~ 1 * X3a
Y1 ~~ 1 * Y1
Y2 ~~ 1 * Y2
Y3 ~~ 1 * Y3
"
fit <- sem(model, data = output)
fit_value <- fitMeasures(fit)
summary(fit, standardized = T)
fit_sum <- parameterEstimates(fit)
